name: Kernel Build with KernelSU-Next

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches:
      - main # Change this to your main kernel source branch (e.g., lineage-20)

jobs:
  build:
    runs-on: ubuntu-latest # You can change this to a self-hosted runner if needed

    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v4
        with:
          repository: your-username/M62-backportt # <<< IMPORTANT: Replace with your actual kernel repo and user
          ref: your-branch-name # <<< IMPORTANT: Replace with your actual kernel branch (e.g., lineage-20)
          path: . # Checkout into the root of the workspace

      - name: Checkout KernelSU-Next
        uses: actions/checkout@v4
        with:
          repository: iHagoss/KernelSU-Next # Your forked KernelSU-Next repo
          ref: main # Or the specific branch/tag you use for KernelSU
          path: KernelSU # This will clone it into a directory named 'KernelSU' in your workspace

      - name: Install Build Dependencies
        run: |
          echo "Installing build dependencies..."
          sudo apt update
          sudo apt install -y make gcc flex bison libssl-dev libelf-dev libncurses5-dev bc cpio python3-pip android-sdk-libsparse-utils
          pip3 install pyyaml
          echo "Dependencies installed."

      - name: Integrate KernelSU
        run: |
          echo "Integrating KernelSU..."

          if [ ! -d "KernelSU" ]; then
            echo "❌ KernelSU directory not found! Ensure the KernelSU repository is cloned correctly."
            exit 1
          fi

          # Determine the correct KernelSU source root (kernel or ksu subdirectory)
          KERNELSU_SOURCE_ROOT_IN_CLONE=""
          if [ -d "KernelSU/kernel" ]; then
            KERNELSU_SOURCE_ROOT_IN_CLONE="KernelSU/kernel"
            echo "✅ Found KernelSU kernel directory: KernelSU/kernel"
          elif [ -d "KernelSU/ksu" ]; then
            KERNELSU_SOURCE_ROOT_IN_CLONE="KernelSU/ksu"
            echo "✅ Found KernelSU ksu directory: KernelSU/ksu"
          else
            echo "❌ KernelSU kernel files not found in expected locations (KernelSU/kernel or KernelSU/ksu) inside KernelSU clone!"
            echo "Listing contents of KernelSU directory:"
            ls -R KernelSU || true
            exit 1
          fi

          # Find the setup.sh script. It might be in the KERNELSU_SOURCE_ROOT_IN_CLONE or the top-level KernelSU clone.
          SETUP_SH_PATH=""
          if [ -f "$KERNELSU_SOURCE_ROOT_IN_CLONE/setup.sh" ]; then
            SETUP_SH_PATH="$KERNELSU_SOURCE_ROOT_IN_CLONE/setup.sh"
            echo "✅ Found KernelSU setup script at: $SETUP_SH_PATH"
          elif [ -f "KernelSU/setup.sh" ]; then # Fallback to root of KernelSU clone
            SETUP_SH_PATH="KernelSU/setup.sh"
            echo "✅ Found KernelSU setup script at: $SETUP_SH_PATH (root of clone)"
          else
            echo "❌ KernelSU setup.sh script not found. KernelSU integration will likely fail without it."
            exit 1
          fi

          echo "Running KernelSU setup script: bash $SETUP_SH_PATH"
          chmod +x "$SETUP_SH_PATH"
          # The setup.sh script typically expects to be run from the main kernel source root.
          # GITHUB_WORKSPACE is the path to your M62-backportt repository.
          (cd "$GITHUB_WORKSPACE" && bash "$GITHUB_WORKSPACE/$SETUP_SH_PATH") || { echo "❌ KernelSU setup.sh failed during execution! This likely points to incorrect paths in the script itself or its execution context."; exit 1; }
          echo "KernelSU setup script finished."

          # Verify KernelSU integration after setup attempts
          echo "Verifying KernelSU integration after setup:"
          if [ -f "ksu.c" ] || [ -d "kernelsu" ] || [ -d "ksu" ]; then # Check for common KSU module dirs/files
            echo "✅ KernelSU module files/directories appear to be in place."
          else
            echo "❌ KernelSU module files/directories NOT found after setup.sh. Integration likely failed. This is a critical error."
            ls -l || true # List top-level files for debugging
            exit 1 # Fail if KernelSU is not present
          fi
          if grep -q "CONFIG_KSU" Kconfig 2>/dev/null; then
              echo "✅ CONFIG_KSU entry found in Kconfig (post-integration check)."
          else
              echo "❌ CONFIG_KSU entry NOT found in Kconfig. This is unusual; KernelSU setup should add it. Build will likely fail."
              exit 1 # Fail if KSU is not configured
          fi
          # Check if the main Makefile was patched
          if grep -q "kernelsu.o" Makefile 2>/dev/null; then
              echo "✅ 'kernelsu.o' found in main Makefile (indicating successful patching)."
          else
              echo "❌ 'kernelsu.o' NOT found in main Makefile. KernelSU module might not be linked. Build will likely fail."
              exit 1
          fi
          echo "Current directory contents around KernelSU problem areas (for debugging):"
          ls -l ksu.c fs/ security/selinux/include/ include/linux/ || true

      - name: Configure Kernel
        run: |
          echo "Configuring kernel with defconfig: beyond2lte.config"
          # Use KCONFIG_DEFCONFIG to explicitly point to the config file
          make O=out KCONFIG_DEFCONFIG=arch/arm64/configs/beyond2lte.config defconfig

      - name: Build Kernel
        run: |
          echo "Starting kernel build..."
          # Adjust ARCH and CROSS_COMPILE based on your kernel and toolchain needs
          # For arm64, typically you'd use aarch64-linux-gnu- as cross compiler prefix
          # Assuming you have a cross-compiler available in PATH or provide full path
          make O=out -j$(nproc) ARCH=arm64 # CROSS_COMPILE=aarch64-linux-gnu-

      - name: Upload Kernel Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-artifacts
          path: |
            out/arch/arm64/boot/Image
            out/arch/arm64/boot/dtbo.img # Adjust this path if your kernel outputs different artifacts (e.g., Image.gz, or no dtbo.img)
            # Add any other artifacts you need, like modules, dtbs, etc.
